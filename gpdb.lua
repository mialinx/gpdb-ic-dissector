local gpdb_proto = Proto("gpdb", "GreenPlum interconnect dissector")
local gpdb_header_length = 16 * 4

gpdb_proto.fields.mot_id        = ProtoField.int32("gpdb.mot_id", "MotionNodeId", base.DEC)
gpdb_proto.fields.src_pid       = ProtoField.int32("gpdb.src_pid", "SrcPid", base.DEC)
gpdb_proto.fields.src_port      = ProtoField.int32("gpdb.src_port", "SrcPort", base.DEC)
gpdb_proto.fields.dst_pid       = ProtoField.int32("gpdb.dst_pid", "DstPid", base.DEC)
gpdb_proto.fields.dst_port      = ProtoField.int32("gpdb.dst_port", "DstPort", base.DEC)
gpdb_proto.fields.session_id    = ProtoField.int32("gpdb.session_id", "SessionId", base.DEC)
gpdb_proto.fields.ic_id         = ProtoField.uint32("gpdb.ic_id", "IcId", base.DEC)
gpdb_proto.fields.recv_slice    = ProtoField.int32("gpdb.recv_slice", "RecvSlice",  base.DEC)
gpdb_proto.fields.send_slice    = ProtoField.int32("gpdb.send_slice", "SendSlice",  base.DEC)
gpdb_proto.fields.src_segment   = ProtoField.int32("gpdb.src_segment", "SrcSegment", base.DEC)
gpdb_proto.fields.dst_segment   = ProtoField.int32("gpdb.dst_segment", "DstSegment", base.DEC)
gpdb_proto.fields.crc           = ProtoField.uint32("gpdb.crc", "CRC", base.DEC)
gpdb_proto.fields.flags         = ProtoField.uint32("gpdb.flags", "Flags", base.DEC)
gpdb_proto.fields.len           = ProtoField.int32("gpdb.len", "Length", base.DEC)
gpdb_proto.fields.seq           = ProtoField.uint32("gpdb.seq", "Seq", base.DEC)
gpdb_proto.fields.extra_seq     = ProtoField.uint32("gpdb.extra_seq", "ExtraSeq", base.DEC)

gpdb_proto.fields.flags_RECEIVER_TO_SENDER = ProtoField.uint32("gpdb.flags.receiver_to_sender",  "RECEIVER_TO_SENDER", base.DEC, packetbool, 0x01)
gpdb_proto.fields.flags_ACK                = ProtoField.uint32("gpdb.flags.ack",                 "ACK",                base.DEC, packetbool, 0x02)
gpdb_proto.fields.flags_STOP               = ProtoField.uint32("gpdb.flags.stop",                "STOP",               base.DEC, packetbool, 0x04)
gpdb_proto.fields.flags_EOS                = ProtoField.uint32("gpdb.flags.eos",                 "EOS",                base.DEC, packetbool, 0x08)
gpdb_proto.fields.flags_NAK                = ProtoField.uint32("gpdb.flags.nak",                 "NAK",                base.DEC, packetbool, 0x10)
gpdb_proto.fields.flags_DISORDER           = ProtoField.uint32("gpdb.flags.disorder",            "DISORDER",           base.DEC, packetbool, 0x20)
gpdb_proto.fields.flags_DUPLICATE          = ProtoField.uint32("gpdb.flags.duplicate",           "DUPLICATE",          base.DEC, packetbool, 0x40)
gpdb_proto.fields.flags_CAPACITY           = ProtoField.uint32("gpdb.flags.capacity",            "CAPACITY",           base.DEC, packetbool, 0x80)

function gpdb_proto.dissector(buffer, pinfo, tree)
    if buffer:len() < gpdb_header_length then return end
    pinfo.cols.protocol = "GPDB"
    local tree = tree:add(gpdb_proto, buffer(0, gpdb_header_length), "GPDB Interconnect protocol")
    tree:add_le(gpdb_proto.fields.mot_id,       buffer(0, 4))
    tree:add_le(gpdb_proto.fields.src_pid,      buffer(4, 4))
    tree:add_le(gpdb_proto.fields.src_port,     buffer(8, 4))
    tree:add_le(gpdb_proto.fields.dst_pid,      buffer(12, 4))
    tree:add_le(gpdb_proto.fields.dst_port,     buffer(16, 4))
    tree:add_le(gpdb_proto.fields.session_id,   buffer(20, 4))
    tree:add_le(gpdb_proto.fields.ic_id,        buffer(24, 4))
    tree:add_le(gpdb_proto.fields.recv_slice,   buffer(28, 4))
    tree:add_le(gpdb_proto.fields.send_slice,   buffer(32, 4))
    tree:add_le(gpdb_proto.fields.src_segment,  buffer(36, 4))
    tree:add_le(gpdb_proto.fields.dst_segment,  buffer(40, 4))
    tree:add_le(gpdb_proto.fields.crc,          buffer(44, 4))
    tree:add_le(gpdb_proto.fields.flags,        buffer(48, 4))
    tree:add_le(gpdb_proto.fields.len,          buffer(52, 4))
    tree:add_le(gpdb_proto.fields.seq,          buffer(56, 4))
    tree:add_le(gpdb_proto.fields.extra_seq,    buffer(60, 4))

    tree:add_le(gpdb_proto.fields.flags_RECEIVER_TO_SENDER, buffer(48, 4))
    tree:add_le(gpdb_proto.fields.flags_ACK,                buffer(48, 4))
    tree:add_le(gpdb_proto.fields.flags_STOP,               buffer(48, 4))
    tree:add_le(gpdb_proto.fields.flags_EOS,                buffer(48, 4))
    tree:add_le(gpdb_proto.fields.flags_NAK,                buffer(48, 4))
    tree:add_le(gpdb_proto.fields.flags_DISORDER,           buffer(48, 4))
    tree:add_le(gpdb_proto.fields.flags_DUPLICATE,          buffer(48, 4))
    tree:add_le(gpdb_proto.fields.flags_CAPACITY,           buffer(48, 4))
end

local udp_table = DissectorTable.get("udp.port")
udp_table:add("10000-64000", gpdb_proto)
